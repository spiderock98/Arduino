
AVRASM ver. 2.1.30  D:\Cac chuan giao tiep\LCD - 1 Write\List\code.asm Wed May 15 18:06:38 2019

D:\Cac chuan giao tiep\LCD - 1 Write\List\code.asm(1057): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _data_MASK=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c03b      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _0x20:
D:\Cac chuan giao tiep\LCD - 1 Write\List\code.asm(1087): warning: .cseg .db misalignment - padding zero byte
000013 00ff      	.DB  0xFF
                 _0x0:
000014 2020
000015 2020
000016 2020
000017 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000018 2020
000019 2020
00001a 2020
00001b 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00001c 4c00
00001d 4443
00001e 3631
00001f 3230      	.DB  0x0,0x4C,0x43,0x44,0x31,0x36,0x30,0x32
000020 3120
000021 5720
000022 6972
000023 6574      	.DB  0x20,0x31,0x20,0x57,0x72,0x69,0x74,0x65
000024 4800
000025 6c65
000026 6f6c
000027 5720      	.DB  0x0,0x48,0x65,0x6C,0x6C,0x6F,0x20,0x57
000028 726f
000029 646c
00002a 2120
D:\Cac chuan giao tiep\LCD - 1 Write\List\code.asm(1094): warning: .cseg .db misalignment - padding zero byte
00002b 0000      	.DB  0x6F,0x72,0x6C,0x64,0x20,0x21,0x0
                 
                 __GLOBAL_INI_TBL:
00002c 0011      	.DW  0x11
00002d 0160      	.DW  _0x19
00002e 0028      	.DW  _0x0*2
                 
00002f 0011      	.DW  0x11
000030 0171      	.DW  _0x19+17
000031 0028      	.DW  _0x0*2
                 
000032 0010      	.DW  0x10
000033 0182      	.DW  _0x1A
000034 0039      	.DW  _0x0*2+17
                 
000035 000e      	.DW  0x0E
000036 0192      	.DW  _0x1A+16
000037 0049      	.DW  _0x0*2+33
                 
000038 0001      	.DW  0x01
000039 0005      	.DW  0x05
00003a 0026      	.DW  _0x20*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000043 e1f8      	LDI  R31,0x18
000044 bdf1      	OUT  WDTCR,R31
000045 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,(14-2)+1
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004f 93ed      	ST   X+,R30
000050 9701      	SBIW R24,1
000051 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000052 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000053 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000054 9185      	LPM  R24,Z+
000055 9195      	LPM  R25,Z+
000056 9700      	SBIW R24,0
000057 f061      	BREQ __GLOBAL_INI_END
000058 91a5      	LPM  R26,Z+
000059 91b5      	LPM  R27,Z+
00005a 9005      	LPM  R0,Z+
00005b 9015      	LPM  R1,Z+
00005c 01bf      	MOVW R22,R30
00005d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005e 9005      	LPM  R0,Z+
00005f 920d      	ST   X+,R0
000060 9701      	SBIW R24,1
000061 f7e1      	BRNE __GLOBAL_INI_LOOP
000062 01fb      	MOVW R30,R22
000063 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a c09f      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define HC595_PIN PORTC.0
                 ;void HC595_Send(unsigned char data)
                 ; 0000 0006 {
                 
                 	.CSEG
                 _HC595_Send:
                 ; 0000 0007   char i;
                 ; 0000 0008   for(i=0;i<7;i++)
00006b 931a      	ST   -Y,R17
                 ;	data -> Y+1
                 ;	i -> R17
00006c e010      	LDI  R17,LOW(0)
                 _0x4:
00006d 3017      	CPI  R17,7
00006e f4c8      	BRSH _0x5
                 ; 0000 0009   {
                 ; 0000 000A     if(data & 0x80)  //bit 1
00006f 81e9      	LDD  R30,Y+1
000070 78e0      	ANDI R30,LOW(0x80)
000071 f049      	BREQ _0x6
                 ; 0000 000B     {
                 ; 0000 000C        HC595_PIN = 0;delay_us(1);
000072 98a8      	CBI  0x15,0
                +
000073 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000074 958a     +DEC R24
000075 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 000D        HC595_PIN = 1;delay_us(15);
000076 9aa8      	SBI  0x15,0
                +
000077 e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
000078 958a     +DEC R24
000079 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 000E     }
                 ; 0000 000F     else            //bit 0
00007a c008      	RJMP _0xB
                 _0x6:
                 ; 0000 0010     {
                 ; 0000 0011       HC595_PIN = 0;delay_us(15);
00007b 98a8      	CBI  0x15,0
                +
00007c e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
00007d 958a     +DEC R24
00007e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 0012       HC595_PIN = 1;delay_us(30);
00007f 9aa8      	SBI  0x15,0
                +
000080 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
000081 958a     +DEC R24
000082 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0000 0013     }
                 _0xB:
                 ; 0000 0014     data <<=1;
000083 81e9      	LDD  R30,Y+1
000084 0fee      	LSL  R30
000085 83e9      	STD  Y+1,R30
                 ; 0000 0015   }
000086 5f1f      	SUBI R17,-1
000087 cfe5      	RJMP _0x4
                 _0x5:
                 ; 0000 0016   //bit cuoi + LAT
                 ; 0000 0017   HC595_PIN = 0;delay_us(200);
000088 98a8      	CBI  0x15,0
                +
000089 e980     +LDI R24 , LOW ( 400 )
00008a e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00008b 9701     +SBIW R24 , 1
00008c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ; 0000 0018   HC595_PIN = 1;delay_us(300);
00008d 9aa8      	SBI  0x15,0
                +
00008e e588     +LDI R24 , LOW ( 600 )
00008f e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
000090 9701     +SBIW R24 , 1
000091 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0000 0019 }
000092 8118      	LDD  R17,Y+0
000093 c048      	RJMP _0x2000001
                 ;
                 ;//------------------------------Giao tiep LCD 1602-------------------------//
                 ;unsigned char data_MASK=0xFF; //byte mat na
                 ;void LCD_Enable(void)
                 ; 0000 001E {
                 _LCD_Enable:
                 ; 0000 001F     //      E
                 ; 0000 0020     // 0000 1000
                 ; 0000 0021     data_MASK |= 0x08;   //SET Enable
000094 e0e8      	LDI  R30,LOW(8)
000095 2a5e      	OR   R5,R30
                 ; 0000 0022     HC595_Send(data_MASK);
000096 d083      	RCALL SUBOPT_0x0
                 ; 0000 0023     data_MASK &= ~0x08;   //RESET Enable
000097 efe7      	LDI  R30,LOW(247)
000098 225e      	AND  R5,R30
                 ; 0000 0024     HC595_Send(data_MASK);
000099 d080      	RCALL SUBOPT_0x0
                 ; 0000 0025 }
00009a 9508      	RET
                 ;void LCD_Send4Bit(unsigned char Data) //chi su dung 4 bit thap cua Data
                 ; 0000 0027 {
                 _LCD_Send4Bit:
                 ; 0000 0028     data_MASK &= 0x0F; //clear 4 bit cao
                 ;	Data -> Y+0
00009b e0ef      	LDI  R30,LOW(15)
00009c 225e      	AND  R5,R30
                 ; 0000 0029     data_MASK |=  (Data & 0x01)<<4;        // lay ra bit 0 dua vao vi tri bit 4
00009d 81e8      	LD   R30,Y
00009e 70e1      	ANDI R30,LOW(0x1)
00009f d07c      	RCALL SUBOPT_0x1
                 ; 0000 002A     data_MASK |=  (Data & 0x02)<<4;        // lay ra bit 1 dua vao vi tri bit 5
0000a0 70e2      	ANDI R30,LOW(0x2)
0000a1 d07a      	RCALL SUBOPT_0x1
                 ; 0000 002B     data_MASK |=  (Data & 0x04)<<4;        // lay ra bit 2 dua vao vi tri bit 6
0000a2 70e4      	ANDI R30,LOW(0x4)
0000a3 d078      	RCALL SUBOPT_0x1
                 ; 0000 002C     data_MASK |=  (Data & 0x08)<<4;        // lay ra bit 3 dua vao vi tri bit 7
0000a4 70e8      	ANDI R30,LOW(0x8)
0000a5 95e2      	SWAP R30
0000a6 7fe0      	ANDI R30,0xF0
0000a7 2a5e      	OR   R5,R30
                 ; 0000 002D }
0000a8 c006      	RJMP _0x2000002
                 ;void LCD_Send1Byte(unsigned char byte)
                 ; 0000 002F {
                 _LCD_Send1Byte:
                 ; 0000 0030 	LCD_Send4Bit(byte >>4);/* Gui 4 bit cao */
                 ;	byte -> Y+0
0000a9 81e8      	LD   R30,Y
0000aa e0f0      	LDI  R31,0
0000ab d090      	RCALL __ASRW4
0000ac d074      	RCALL SUBOPT_0x2
                 ; 0000 0031 	LCD_Enable();
                 ; 0000 0032 	LCD_Send4Bit(byte); /* Gui 4 bit thap*/
0000ad 81e8      	LD   R30,Y
0000ae d072      	RCALL SUBOPT_0x2
                 ; 0000 0033 	LCD_Enable();
                 ; 0000 0034 }
                 _0x2000002:
0000af 9621      	ADIW R28,1
0000b0 9508      	RET
                 ;// Ham di chuyen con tro: row=0-1; col=0-15 (2 hang + 16 cot)
                 ;void LCD_chonvitri(unsigned char x, unsigned char y)
                 ; 0000 0037 {
                 _LCD_chonvitri:
                 ; 0000 0038 	unsigned char address;
                 ; 0000 0039 	if (y == 0) address = (0x80 + x);	 // row=0 - hang 1
0000b1 931a      	ST   -Y,R17
                 ;	x -> Y+2
                 ;	y -> Y+1
                 ;	address -> R17
0000b2 81e9      	LDD  R30,Y+1
0000b3 30e0      	CPI  R30,0
0000b4 f419      	BRNE _0x14
0000b5 81ea      	LDD  R30,Y+2
0000b6 58e0      	SUBI R30,-LOW(128)
0000b7 c002      	RJMP _0x1F
                 ; 0000 003A     else address = (0xC0 + x);			 // row=1 - hang 2
                 _0x14:
0000b8 81ea      	LDD  R30,Y+2
0000b9 54e0      	SUBI R30,-LOW(192)
                 _0x1F:
0000ba 2f1e      	MOV  R17,R30
                 ; 0000 003B     delay_us(1000);
                +
0000bb ed80     +LDI R24 , LOW ( 2000 )
0000bc e097     +LDI R25 , HIGH ( 2000 )
                +__DELAY_USW_LOOP :
0000bd 9701     +SBIW R24 , 1
0000be f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 2000
                 ; 0000 003C     LCD_Send1Byte(address);
0000bf 931a      	ST   -Y,R17
0000c0 dfe8      	RCALL _LCD_Send1Byte
                 ; 0000 003D     delay_us(50);
                +
0000c1 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000c2 958a     +DEC R24
0000c3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
                 ; 0000 003E }
0000c4 8118      	LDD  R17,Y+0
0000c5 9623      	ADIW R28,3
0000c6 9508      	RET
                 ;// Ham hien thi ra man hinh chuoi ki tu
                 ;void LCD_guichuoi(char *s)
                 ; 0000 0041 {
                 _LCD_guichuoi:
                 ; 0000 0042 	while(*s)
                 ;	*s -> Y+0
                 _0x16:
0000c7 81a8      	LD   R26,Y
0000c8 81b9      	LDD  R27,Y+1
0000c9 91ec      	LD   R30,X
0000ca 30e0      	CPI  R30,0
0000cb f081      	BREQ _0x18
                 ; 0000 0043 	{
                 ; 0000 0044 		data_MASK |= 0x02;  //dua chan RS len vcc
0000cc e0e2      	LDI  R30,LOW(2)
0000cd 2a5e      	OR   R5,R30
                 ; 0000 0045         HC595_Send(data_MASK);
0000ce d04b      	RCALL SUBOPT_0x0
                 ; 0000 0046 		LCD_Send1Byte(*s);
0000cf 81a8      	LD   R26,Y
0000d0 81b9      	LDD  R27,Y+1
0000d1 91ec      	LD   R30,X
0000d2 d051      	RCALL SUBOPT_0x3
                 ; 0000 0047 		data_MASK &= ~0x02;  //dua chan RS xuong mass
0000d3 efed      	LDI  R30,LOW(253)
0000d4 225e      	AND  R5,R30
                 ; 0000 0048 	    HC595_Send(data_MASK);
0000d5 d044      	RCALL SUBOPT_0x0
                 ; 0000 0049 		s++;
0000d6 81e8      	LD   R30,Y
0000d7 81f9      	LDD  R31,Y+1
0000d8 9631      	ADIW R30,1
0000d9 83e8      	ST   Y,R30
0000da 83f9      	STD  Y+1,R31
                 ; 0000 004A 	}
0000db cfeb      	RJMP _0x16
                 _0x18:
                 ; 0000 004B }
                 _0x2000001:
0000dc 9622      	ADIW R28,2
0000dd 9508      	RET
                 ;void LCD_guikitu(int s)
                 ; 0000 004D {
                 ; 0000 004E 		data_MASK |= 0x02;  //dua chan RS len vcc
                 ;	s -> Y+0
                 ; 0000 004F         HC595_Send(data_MASK);
                 ; 0000 0050 		LCD_Send1Byte(s);
                 ; 0000 0051         data_MASK &= ~0x02;  //dua chan RS xuong mass
                 ; 0000 0052 	    HC595_Send(data_MASK);
                 ; 0000 0053 }
                 ;// Ham xoa man hinh
                 ;void LCD_xoamanhinh()
                 ; 0000 0056 {
                 _LCD_xoamanhinh:
                 ; 0000 0057     LCD_chonvitri(0,0);
0000de d047      	RCALL SUBOPT_0x4
0000df d046      	RCALL SUBOPT_0x4
0000e0 dfd0      	RCALL _LCD_chonvitri
                 ; 0000 0058 	LCD_guichuoi("                ");
                +
0000e1 e6e0     +LDI R30 , LOW ( _0x19 + ( 0 ) )
0000e2 e0f1     +LDI R31 , HIGH ( _0x19 + ( 0 ) )
                 	__POINTW1MN _0x19,0
0000e3 d045      	RCALL SUBOPT_0x5
                 ; 0000 0059 	LCD_chonvitri(1,0);
0000e4 e0e1      	LDI  R30,LOW(1)
0000e5 93ea      	ST   -Y,R30
0000e6 d03f      	RCALL SUBOPT_0x4
0000e7 dfc9      	RCALL _LCD_chonvitri
                 ; 0000 005A 	LCD_guichuoi("                ");
                +
0000e8 e7e1     +LDI R30 , LOW ( _0x19 + ( 17 ) )
0000e9 e0f1     +LDI R31 , HIGH ( _0x19 + ( 17 ) )
                 	__POINTW1MN _0x19,17
0000ea d03e      	RCALL SUBOPT_0x5
                 ; 0000 005B 	LCD_chonvitri(0,0);
0000eb d03a      	RCALL SUBOPT_0x4
0000ec d039      	RCALL SUBOPT_0x4
0000ed dfc3      	RCALL _LCD_chonvitri
                 ; 0000 005C }
0000ee 9508      	RET
                 
                 	.DSEG
                 _0x19:
000160           	.BYTE 0x22
                 ;// Ham khoi tao LCD
                 ;void LCD_khoitao()
                 ; 0000 005F {
                 
                 	.CSEG
                 _LCD_khoitao:
                 ; 0000 0060     data_MASK &= ~0x04;  //dua chan RW xuong mass
0000ef efeb      	LDI  R30,LOW(251)
0000f0 225e      	AND  R5,R30
                 ; 0000 0061     data_MASK &= ~0x02;  //dua chan RS xuong mass
0000f1 efed      	LDI  R30,LOW(253)
0000f2 225e      	AND  R5,R30
                 ; 0000 0062     //HC595_Send(data_MASK);
                 ; 0000 0063 	LCD_Send4Bit(0x03);
0000f3 e0e3      	LDI  R30,LOW(3)
0000f4 d02c      	RCALL SUBOPT_0x2
                 ; 0000 0064 	LCD_Enable();
                 ; 0000 0065 	delay_ms(5);
0000f5 e0e5      	LDI  R30,LOW(5)
0000f6 e0f0      	LDI  R31,HIGH(5)
0000f7 d034      	RCALL SUBOPT_0x6
                 ; 0000 0066 	LCD_Enable();
                 ; 0000 0067 	delay_ms(100);
0000f8 e6e4      	LDI  R30,LOW(100)
0000f9 e0f0      	LDI  R31,HIGH(100)
0000fa d031      	RCALL SUBOPT_0x6
                 ; 0000 0068 	LCD_Enable();
                 ; 0000 0069 	LCD_Send4Bit(0x02);	// dua con tro ve dau man hinh
0000fb e0e2      	LDI  R30,LOW(2)
0000fc d024      	RCALL SUBOPT_0x2
                 ; 0000 006A 	LCD_Enable();
                 ; 0000 006B 
                 ; 0000 006C 	LCD_Send1Byte(0x28);
0000fd e2e8      	LDI  R30,LOW(40)
0000fe d025      	RCALL SUBOPT_0x3
                 ; 0000 006D 	LCD_Send1Byte(0x0C); // Bat hien thi, bat con tro	 0x0C neu muon tat con tro
0000ff e0ec      	LDI  R30,LOW(12)
000100 d023      	RCALL SUBOPT_0x3
                 ; 0000 006E 	LCD_Send1Byte(0x06);
000101 e0e6      	LDI  R30,LOW(6)
000102 d021      	RCALL SUBOPT_0x3
                 ; 0000 006F 	delay_ms(20);
000103 e1e4      	LDI  R30,LOW(20)
000104 e0f0      	LDI  R31,HIGH(20)
000105 93fa      	ST   -Y,R31
000106 93ea      	ST   -Y,R30
000107 d028      	RCALL _delay_ms
                 ; 0000 0070     LCD_xoamanhinh();
000108 dfd5      	RCALL _LCD_xoamanhinh
                 ; 0000 0071 }
000109 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 0074 {
                 _main:
                 ; 0000 0075 PORTC=0xff;
00010a efef      	LDI  R30,LOW(255)
00010b bbe5      	OUT  0x15,R30
                 ; 0000 0076 DDRC=0xff;
00010c bbe4      	OUT  0x14,R30
                 ; 0000 0077 LCD_khoitao();
00010d dfe1      	RCALL _LCD_khoitao
                 ; 0000 0078 LCD_guichuoi("LCD1602 1 Write");
                +
00010e e8e2     +LDI R30 , LOW ( _0x1A + ( 0 ) )
00010f e0f1     +LDI R31 , HIGH ( _0x1A + ( 0 ) )
                 	__POINTW1MN _0x1A,0
000110 d018      	RCALL SUBOPT_0x5
                 ; 0000 0079 LCD_chonvitri(0,1);
000111 d014      	RCALL SUBOPT_0x4
000112 e0e1      	LDI  R30,LOW(1)
000113 93ea      	ST   -Y,R30
000114 df9c      	RCALL _LCD_chonvitri
                 ; 0000 007A LCD_guichuoi("Hello World !");
                +
000115 e9e2     +LDI R30 , LOW ( _0x1A + ( 16 ) )
000116 e0f1     +LDI R31 , HIGH ( _0x1A + ( 16 ) )
                 	__POINTW1MN _0x1A,16
000117 d011      	RCALL SUBOPT_0x5
                 ; 0000 007B while (1)
                 _0x1B:
                 ; 0000 007C       {
                 ; 0000 007D 
                 ; 0000 007E       }
000118 cfff      	RJMP _0x1B
                 ; 0000 007F }
                 _0x1E:
000119 cfff      	RJMP _0x1E
                 
                 	.DSEG
                 _0x1A:
000182           	.BYTE 0x1E
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00011a 925a      	ST   -Y,R5
00011b cf4f      	RJMP _HC595_Send
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
00011c 95e2      	SWAP R30
00011d 7fe0      	ANDI R30,0xF0
00011e 2a5e      	OR   R5,R30
00011f 81e8      	LD   R30,Y
000120 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000121 93ea      	ST   -Y,R30
000122 df78      	RCALL _LCD_Send4Bit
000123 cf70      	RJMP _LCD_Enable
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000124 93ea      	ST   -Y,R30
000125 cf83      	RJMP _LCD_Send1Byte
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000126 e0e0      	LDI  R30,LOW(0)
000127 93ea      	ST   -Y,R30
000128 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000129 93fa      	ST   -Y,R31
00012a 93ea      	ST   -Y,R30
00012b cf9b      	RJMP _LCD_guichuoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00012c 93fa      	ST   -Y,R31
00012d 93ea      	ST   -Y,R30
00012e d001      	RCALL _delay_ms
00012f cf64      	RJMP _LCD_Enable
                 
                 
                 	.CSEG
                 _delay_ms:
000130 91e9      	ld   r30,y+
000131 91f9      	ld   r31,y+
000132 9630      	adiw r30,0
000133 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000134 ed80     +LDI R24 , LOW ( 0x7D0 )
000135 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000136 9701     +SBIW R24 , 1
000137 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000138 95a8      	wdr
000139 9731      	sbiw r30,1
00013a f7c9      	brne __delay_ms0
                 __delay_ms1:
00013b 9508      	ret
                 
                 __ASRW4:
00013c 95f5      	ASR  R31
00013d 95e7      	ROR  R30
                 __ASRW3:
00013e 95f5      	ASR  R31
00013f 95e7      	ROR  R30
                 __ASRW2:
000140 95f5      	ASR  R31
000141 95e7      	ROR  R30
000142 95f5      	ASR  R31
000143 95e7      	ROR  R30
000144 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :  10 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   9 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  25 r25:   6 r26:   5 r27:   4 r28:   4 r29:   1 r30:  94 r31:  23 
x  :   5 y  :  37 z  :   7 
Registers used: 16 out of 35 (45.7%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   5 and   :   5 andi  :   7 asr   :   4 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   3 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   2 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 
cpc   :   0 cpi   :   3 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   0 ld    :  11 ldd   :  10 ldi   :  58 lds   :   0 lpm   :   7 
lsl   :   1 lsr   :   0 mov   :   1 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   4 ori   :   0 out   :  10 
pop   :   0 push  :   0 rcall :  38 ret   :  10 reti  :   0 rjmp  :  34 
rol   :   0 ror   :   4 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 
sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  19 std   :   2 
sts   :   0 sub   :   0 subi  :   3 swap  :   2 tst   :   0 wdr   :   1 

Instructions used: 32 out of 114 (28.1%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00028a    568     82    650    8192   7.9%
[.dseg] 0x000060 0x0001a0      0     64     64    1119   5.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
